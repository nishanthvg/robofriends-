{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","lenght","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAeeA,EAbF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,GAAGC,EAAgB,EAAhBA,KAAKC,EAAW,EAAXA,MACnB,OAEI,kBAAC,WAAD,KACI,yBAAKC,UAAY,uDACb,yBAAKC,IAAM,SAASC,IAAG,+BAA2BL,EAA3B,mBACvB,4BAAKC,GACL,2BAAIC,MCSLI,EAdE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OACI,kBAAC,WAAD,KAEQA,EAAOC,KAAI,SAACC,EAAKC,GACb,OACI,kBAAC,EAAD,CAAMC,IAAOD,EAAGV,GAAMO,EAAOG,GAAGV,GAAIC,KAAQM,EAAOG,GAAGT,KAAMC,MAASK,EAAOG,GAAGR,aCIxFU,EAZG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,kBAAC,WAAD,KACI,yBAAKV,UAAY,OACjB,2BAAQA,UAAY,gCACpBW,KAAO,SAASC,YAAa,gBAC7BC,SAAYH,OCETI,G,MARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAASC,OAAO,kBAAkBC,OAAQ,UAC7DJ,EAAMK,YCiBJC,E,kDAnBX,WAAaN,GAAQ,IAAD,8BAChB,cAAOA,IACFO,MAAQ,CACTC,UAAU,GAHE,E,8DAOFC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAGG,KAAKJ,MAAMC,SACH,sDAEJG,KAAKX,MAAMK,a,GAhBEQ,aCoDbC,E,kDA5CX,aAAe,IAAD,8BACV,gBAaJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAbzC,EAAKZ,MAAQ,CACTlB,OAAQ,GACR4B,YAAa,IAJP,E,gEAQQ,IAAD,OACjBG,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAACvB,OAAQmC,S,+BAOnC,IAAD,OACAC,EAAiBd,KAAKJ,MAAMlB,OAAOqC,QAAO,SAAAC,GAC5C,OAAOA,EAAM5C,KAAK6C,cAAcC,SAAS,EAAKtB,MAAMU,YAAYW,kBAEpE,OAAgC,IAA7BjB,KAAKJ,MAAMlB,OAAOyC,OACV,uCAGH,yBAAK7C,UAAY,MACb,gCACI,wBAAIA,UAAY,MAAhB,gBAGA,kBAAC,EAAD,CAAWU,aAAgBgB,KAAKI,kBAEpC,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU1B,OAAUoC,W,GApC9BZ,aCGEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,a","file":"static/js/main.649ced5b.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\n\nconst Card = ({id,name,email}) => {\n    return (\n        //className are predefined tackyons \n        <Fragment>\n            <div className = \"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n                <img alt = \"photos\" src ={`https://robohash.org/${id}?size=200x200`} />         \n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </Fragment>\n    );\n}\n\nexport default Card;","import React, { Fragment } from \"react\";\nimport Card from \"./Card\";\n//import {robots} from \"./robots\";\n\nconst CardList = ({robots}) => {\n    return (\n        <Fragment>\n            {\n                robots.map((user,i) => {\n                    return (\n                        <Card key = {i} id = {robots[i].id} name = {robots[i].name} email = {robots[i].email} />\n                        )\n                    })\n            }\n        </Fragment>\n    );\n}\n\nexport default CardList;","import React, { Fragment } from \"react\";\n\nconst SearchBox = ({searchChange}) => {\n    return (\n        <Fragment>\n            <div className = \"pa2\">\n            <input  className = \"pa3 b--green bg-lightest-blue\"\n            type = \"search\" placeholder =\"search robots\" \n            onChange = {searchChange}\n            />\n            </div>\n        </Fragment>\n    );\n}\nexport default SearchBox;","import React from \"react\";\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll',border:'5px solid black',height: '800px'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor (props) {\n        super (props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error,info) {\n        this.setState({hasError: true})\n    }\n\n    render (){\n        if(this.state.hasError) {\n            return <h1>Oops. That is not good</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundary;","//parent of all other components \nimport React, {Component} from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport './App.css';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary'\n\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            robots: [],\n            searchfield: \"\"\n        }\n    }\n\n    componentDidMount () { //used to get info required after rendering \n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response =>response.json())\n            .then(users => this.setState({robots: users}))\n    }\n\n    onSearchChange = (event) => {\n        this.setState({searchfield: event.target.value})\n    }\n    \n    render () {\n        const filteredRobots = this.state.robots.filter(robot => {\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n        })\n        if(this.state.robots.lenght === 0) {\n            return <h1>loading</h1> //when files take too long to download \n        } else {\n            return (\n                <div className = \"tc\">\n                    <header >\n                        <h1 className = 'f1'>\n                            Robotfriends\n                        </h1>\n                        <SearchBox searchChange = {this.onSearchChange} />\n                    </header>\n                    <Scroll>\n                        <ErrorBoundary>\n                            <CardList robots = {filteredRobots} />\n                        </ErrorBoundary>\n                    </Scroll>\n                </div>\n            )\n        }\n    }\n}\n\nexport default App ;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./containers/App\";\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n//import {robots} from \"./robots\";\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}